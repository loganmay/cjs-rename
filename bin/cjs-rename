#!/usr/bin/env node
// vi:syntax=javascript

var program = require('commander');
var App = require('../lib/index');
var package = require('../package.json');
var Path = require('../lib/path');

var RED   = '\u001b[31m';
var BLUE  = '\u001b[34m';
var RESET = '\u001b[0m';

program
  .version(package.version)
  .option('-d, --dry', 'Do not write changes to disk.')
  .option('-s, --search', 'Search by filename')
  .command('*')
  .description('cjs-rename [from] [to] [source...]')
  .action(command);

program.parse(process.argv);

// Show help if no args
if (! program.args.length) {
  console.log(program.help());
}

function command (from, to, source) {

  var app = new App({
    mode: program.search ? 'search' : 'path',
    cwd: typeof(source) === 'string' ? source : undefined,
    to: to,
    from: from,
    dryrun: program.dry === true
  });

  app.run().then(function () {

    if (app.changes.length + app.files.length === 0) {
      return console.log('No changes made');
    }

    if (program.dry) {
      console.log(RED + '[drymode]: will not save changes' + RESET);
    }

    var change, path, from, to;

    console.log('\nMoving:');

    app.files.forEach(function (file) { 
      from = Path.relative(app.cwd, file.from);
      to   = Path.relative(app.cwd, file.to);
      console.log('-',  BLUE + from, RESET + '>' + BLUE, to, RESET);
    });

    console.log('\nFixing:');

    app.changes.forEach(function (change) {
      path = Path.relative(app.cwd, change.path);
      console.log('- [' + change.count + ']' + BLUE, path, RESET);
    });

  });

}
