#!/usr/bin/env node
// vi:syntax=javascript

var program = require('commander');
var Rename = require('../lib/rename');
var package = require('../package.json');
var Path = require('../lib/path');

program
  .version(package.version)
  .option('-d, --dry', 'Do not write changes to disk.')
  .command('*')
  .description('cjs-rename [from] [to] [source...]')
  .action(command);

program.parse(process.argv);

// Show help if no args
if (! program.args.length) {
  console.log(program.help());
}

function command (from, to, source) {

  var rename = new Rename({
    to: to,
    from: from,
    folder: typeof(source) === 'string' ? source : undefined,
    dryrun: program.dry === true
  });

  rename.run().then(function (changes) {

    if (! changes.length) {
      return console.log('No changes made');
    }

    if (program.dry) {
      console.log('Renaming (will not save changes):');
    } else {
      console.log('Renaming:');
    }

    var change, path, from, to;

    for (var i = 0, len = changes.length; i < len; i++) {
      change = changes[i];
      switch (change.type) {
        case 'fix':
          path = Path.relative(rename.cwd, change.path);
          console.log('-', path, 'fixed', change.count, 'require()s');
          break;
        case 'move':
          from = Path.relative(rename.cwd, change.from);
          to   = Path.relative(rename.cwd, change.to);
          console.log('- moved', from, 'to', to);
          break;
      }
    }

  });

}
